Built-in django model for users -/
enums ways in models without textchoices -/
relations in SQL - /
default related_name in models - /
Joins in django ORM - /
ModelSerializer -> Serializer -/
started_on < completed_on (validations on status value) -/
Primary keys as uuid(advantage and disadvantage) -/
routing in DRF 
Modelviewset -> ApiView -/
Architecture of django -/
API level validation (pydantic)
GIL in python, drawbacks of async in python -/

diff in null and blank -/
check migrations and undertand DB layer and application layer 
migration count -/

Logs models (generated through signals)
-> if todo contains any non-allowed words -> todo_id, log, -/

---------------------------------------------------------------------------
select_related and prefetch_related -/
evaluation of queries .get, first, all, queryset methods -/ objects.filter().filter().exclude().all().first()
model level valuation for created_on < completed_on -/
reverse migration -/
admin to create banned words -/
API to get logs (group by users, count of total defaults by user) -/
API to ban user -/
automatically ban user after 15 defaults -/


recurring on new task should be created (cron job)

---------------------------
full_clean and clean -/
custom user auth model with roles(admin, user), is_banned -/
admin panel all tables modify with attributes as seperate columns, filter, search -/
custom persmission and auth methods -/
register model via decorator -/
modify API to get logs -/
data: [
    {
        user_id: {id},
        logs: [
            {
                word: '',
                count: 2
            }
        ]
    }
]
Q object -/
regex in check_todo signal -/
Meta class in models -/
querysetmanager in models -/
.save() functions order
due_on > now validation in models -/

-------------------------------------
add persmissions -/
multiple user ban in single API with toggle -/

def generator(start, end):
    i = start
    while start < end:
        yield i
    i+=1


lambda functions, generator and iterator, comprehensions (list, set, dictionery)
How django ORM create join queries
TypeError: unhashable type: 'list', hashable objects, custom objects mutable or immutable, change mutable to immutable if mutable
JSON parse and render in DRF, custom renderers
settings.py
advantages and disadvantage of django
or without Q
datetime.now() and timezone.now()
to_python, get_db_prep_value, get_internal_type
library, packages, modules
apps.py file
Add id that don't exists in ban to .json

-------------------------------------------------

celery -/
scheduled tasks in django -/
GCP pub-sub -/
save method override through Base for all models -> publish on update/create
adavntages/ disadvantage of microservices, when to user, communication modes
update signal check -/
clean and signal prev instance in-memory -/
signals -> pub/sub